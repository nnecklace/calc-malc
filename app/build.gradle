/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'java-library'
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/performance/*')
        }))
    }
}

configurations {
  jaxDoclet
}

check.dependsOn jacocoTestReport

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
}

run {
    standardInput = System.in
}

test {
  testLogging {
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
}

task generateRestApiDocs(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = reporting.file("rest-api-docs")
  options.docletpath = configurations.jaxDoclet.files.asType(List)
  options.doclet = "com.lunatech.doclets.jax.jaxrs.JAXRSDoclet"
  options.addStringOption("jaxrscontext", "http://localhost:8080/myapp")
}

task repl(type: JavaExec) {
  standardInput = System.in
  main = "calcmalc.App"
  classpath = sourceSets.main.runtimeClasspath
  args = ["repl"]
}

task performance(type: JavaExec) {
    main = 'calcmalc.performance.PerformanceTest'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs '-Xss512m' 
}

application {
    // Define the main class for the application.
    mainClass = 'calcmalc.App'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

jar {
  manifest { 
    attributes 'Main-Class': 'calcmalc.App'
  }
}

version = '1.0.0'