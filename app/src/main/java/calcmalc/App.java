/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calcmalc;

import calcmalc.structures.ASTNode;
import calcmalc.structures.Listable;
import calcmalc.structures.Queue;
import calcmalc.structures.Stack;
import calcmalc.logic.types.Token;
import calcmalc.exceptions.EvaluatorException;
import calcmalc.exceptions.LexerException;
import calcmalc.logic.Evaluator;
import calcmalc.logic.Lexer;
import calcmalc.logic.Parser;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Scanner;

public class App {
    public String getGreeting() {
        return      "  _____      _        __  __       _      \n"
                 + "/ _____|    | |      |  \\/  |     | |     \n"
               + "| |     __ _| | ___  | \\  / | __ _| | ___  \n"
               + "| |    / _` | |/ __| | |\\/| |/ _` | |/ __| \n"
               + "| |___| (_| | | (__  | |  | | (_| | | (__  \n"
               + "\\_____\\___,_|_|\\___| |_|  |_|\\__,_|_|\\___|\n";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        run();
    }

    public static void run() {
        Scanner input = new Scanner(System.in);
        Lexer lexer = new Lexer();
        Evaluator evaluator = new Evaluator();
        DecimalFormat df = new DecimalFormat("0.###");
        String output = "";
        while (input.hasNextLine()) {
            String line = input.nextLine().replaceAll("\\s", "");

            try {
                Listable<Token> tokens = lexer.lex(line);
                Parser parser = new Parser(new Queue<>(tokens));
                Stack<ASTNode> nodes = parser.parse();
                while (!nodes.isEmpty()) {
                    if (nodes.peek().token().isAssignment()) {
                        output = evaluator.evaluateAssignment(nodes.pop());
                    } else {
                        output = df.format(evaluator.evaluate(nodes.pop()));
                    }
                }
            } catch (LexerException | ParseException | EvaluatorException e) {
                System.err.println(e.getMessage());
            }
            System.out.println();
        }
        // Only print the last result
        System.out.println(output);
    }
}
