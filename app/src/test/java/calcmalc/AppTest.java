/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calcmalc;

import org.junit.Test;
import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;

public class AppTest {
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;
    private final InputStream originalIn = System.in;
    
    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }
    
    @After
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
        System.setIn(originalIn);
    }

    @Test 
    public void testAppHasAGreeting() throws IOException {
        App classUnderTest = new App();
        ByteArrayInputStream in = new ByteArrayInputStream(classUnderTest.getGreeting().getBytes());
        System.setIn(in);
        classUnderTest.main(new String[0]);
        assertNotNull("app should have a greeting", outContent.toString().trim());
    }

    @Test
    public void testThatReplStartsWithReplCommand() throws IOException {
        App classUnderTest = new App();
        ByteArrayInputStream in = new ByteArrayInputStream("2+2".getBytes());
        System.setIn(in);
        classUnderTest.main(new String[]{"repl"});
        assertTrue(outContent.toString().contains("4"));
    }

    @Test
    public void testMultiLineExpressionResultIsPrinted() throws IOException {
        App classUnderTest = new App();
        classUnderTest.main(new String[]{"src/inputs/test_input_2.txt"});
        assertEquals("14", outContent.toString().trim());
    }

    @Test
    public void testAssignmentIsPrinted() {
        ByteArrayInputStream in = new ByteArrayInputStream("x=2:".getBytes());
        System.setIn(in);
        App.repl();
        assertEquals("<assignment:x>", outContent.toString().trim());
    }

    @Test
    public void testExpressionResultIsPrinted() {
        ByteArrayInputStream in = new ByteArrayInputStream("2+2+2".getBytes());
        System.setIn(in);
        App.repl();
        assertEquals("6", outContent.toString().trim());
    }

    @Test
    public void testEvaluatorExceptionIsThrown() throws Exception {
        String expr = "2 = x : x + 2";
        ByteArrayInputStream in = new ByteArrayInputStream(expr.getBytes());
        System.setIn(in);
        App.repl();

        assertEquals("Assignment error: Can't assign variable to non-symbol or non-function", errContent.toString().trim());
    }

    @Test
    public void testEvaluatorExceptionIsThrownOnIllegalAssignment() throws Exception {
        String expr = "=:";
        ByteArrayInputStream in = new ByteArrayInputStream(expr.getBytes());
        System.setIn(in);
        App.repl();

        assertEquals("Assignment error: Assignment operator should have a symbol to assign and a value to assign too", errContent.toString().trim());
    }

    @Test
    public void testNumberFormatExceptionIsThrownOnIllegalNumber() throws Exception {
        String expr = "2.2.2.2";
        ByteArrayInputStream in = new ByteArrayInputStream(expr.getBytes());
        System.setIn(in);
        App.repl();

        assertEquals("Number was formatted incorrectly: multiple points", errContent.toString().trim());
    }

    @Test
    public void testLexerExceptionIsThrown() throws Exception {
        String expr = "2+2+2@*5";
        ByteArrayInputStream in = new ByteArrayInputStream(expr.getBytes());
        System.setIn(in);
        App.repl();

        assertEquals("Unknown character @ at position 6 in expression 2+2+2@*5\n2+2+2@*5\n     ^", errContent.toString().trim());
    }

    @Test
    public void testFormatOutPutToInteger() {
        String expr = "2.5 + 2.5";
        ByteArrayInputStream in = new ByteArrayInputStream(expr.getBytes());
        System.setIn(in);
        App.repl();

        assertEquals("5", outContent.toString().trim());
    }

    @Test
    public void testFormatOutPutToDouble() {
        String expr = "2.5 + 2.1";
        ByteArrayInputStream in = new ByteArrayInputStream(expr.getBytes());
        System.setIn(in);
        App.repl();

        assertEquals("4.6", outContent.toString().trim());
    }
}
